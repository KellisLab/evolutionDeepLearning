gp = gpar(fill = "orange"),
width = unit(3, "cm")
)
)
jaccard_matrix <- as.matrix(jaccard_matrix)
rownames(jaccard_matrix) <- colnames(jaccard_matrix) <- rownames(jaccard_matrix)
jaccard_matrix
peak_counts <- peak_counts %>% arrange(Biosample)
rownames(peak_counts) <- peak_counts$Biosample
peak_counts
median_lengths <- all_peaks %>%
group_by(Biosample) %>%
summarise(MedianLength = median(Length)) %>%
arrange(Biosample)
median_lengths
row_ha <- rowAnnotation(
`Peak Count` = anno_barplot(
peak_counts$PeakCount,
border = FALSE,
gp = gpar(fill = "steelblue"),
width = unit(3, "cm")
),
`Median Length` = anno_boxplot(
all_peaks$Length ~ all_peaks$Biosample,
outline = FALSE,
gp = gpar(fill = "orange"),
width = unit(3, "cm")
)
)
row_ha
# Ensure alignment of biosample names in all datasets
common_biosamples <- intersect(rownames(jaccard_matrix), peak_counts$Biosample)
peak_counts <- peak_counts %>%
filter(Biosample %in% common_biosamples) %>%
arrange(match(Biosample, rownames(jaccard_matrix)))
median_lengths <- median_lengths %>%
filter(Biosample %in% common_biosamples) %>%
arrange(match(Biosample, rownames(jaccard_matrix)))
# Check dimensions after filtering (must match the rows of the Jaccard matrix)
stopifnot(nrow(peak_counts) == nrow(jaccard_matrix))
stopifnot(nrow(median_lengths) == nrow(jaccard_matrix))
# Create annotations for the heatmap
row_ha <- rowAnnotation(
`Peak Count` = anno_barplot(
peak_counts$PeakCount,
border = FALSE,
gp = gpar(fill = "steelblue"),
width = unit(3, "cm")
),
`Median Length` = anno_boxplot(
all_peaks$Length ~ all_peaks$Biosample,
outline = FALSE,
gp = gpar(fill = "orange"),
width = unit(3, "cm")
)
)
nrow(peak_counts) == nrow(jaccard_matrix)
head(peak_counts)
row_ha <- rowAnnotation(
`Peak Count` = anno_barplot(
peak_counts$PeakCount,
border = FALSE,
gp = gpar(fill = "steelblue"),
width = unit(3, "cm")
)
)
row_ha
Heatmap(
jaccard_matrix,
name = "Jaccard Index",
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = FALSE,
heatmap_legend_param = list(
title = "Jaccard",
at = seq(0, 1, by = 0.2),
labels = seq(0, 1, by = 0.2)
),
right_annotation = row_ha,
row_names_gp = gpar(fontsize = 5),
column_names_gp = gpar(fontsize = 5)
)
Heatmap(jaccard_matrix)
Heatmap(jaccard_matrix)
pdf("testHeatmap.pdf")
Heatmap(jaccard_matrix)
dev.off()
pdf("testHeatmap.pdf")
Heatmap(
jaccard_matrix,
name = "Jaccard Index",
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = FALSE,
heatmap_legend_param = list(
title = "Jaccard",
at = seq(0, 1, by = 0.2),
labels = seq(0, 1, by = 0.2)
),
right_annotation = row_ha,
row_names_gp = gpar(fontsize = 5),
column_names_gp = gpar(fontsize = 5)
)
dev.off()
pdf("testHeatmap.pdf", height=7, width=10)
Heatmap(
jaccard_matrix,
name = "Jaccard Index",
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = FALSE,
heatmap_legend_param = list(
title = "Jaccard",
at = seq(0, 1, by = 0.2),
labels = seq(0, 1, by = 0.2)
),
right_annotation = row_ha,
row_names_gp = gpar(fontsize = 5),
column_names_gp = gpar(fontsize = 5)
)
dev.off()
#### Enrichment ####
data <- read.csv("enrichmentResults.txt", header=FALSE, sep="\t")
head(data)
#### Enrichment ####
data <- read.csv("enrichmentResults.txt", header=FALSE, sep=" ")
head(data)
colnames(data) <- c("Set1", "Set2", "Enrichment")
library(dplyr)
library(tidyr)
wide_data <- data %>%
pivot_wider(names_from="Set1", values_from="Enrichment")
head(wide_data)
pheatmap(wide_data)
library(pheatmap)
pheatmap(wide_data)
data$log2Enrich <- log2(data$Enrichment)
data <- select(data, -c("Enrichment"))
head(data)
wide_data <- data %>%
pivot_wider(names_from="Set1", values_from="Enrichment")
wide_data <- data %>%
pivot_wider(names_from="Set1", values_from="log2Enrich")
pheatmap(wide_data)
head(wide_data)
wide_data[is.na(wide_data)] <- 0
pheatmap(wide_data)
wide_data[is.na(wide_data)] <- 0
pheatmap(wide_data)
data$log2Enrich[!is.finite(data$log2Enrich)] <- 0
data <- select(data, -c("Enrichment"))
wide_data <- data %>%
pivot_wider(names_from="Set1", values_from="log2Enrich")
wide_data[is.na(wide_data)] <- 0
pheatmap(wide_data)
sum(is.na(data$log2Enrich))
sum(is.infinite(data$log2Enrich))
sum(is.nan(data$log2Enrich))
sum(is.na(wide_data))       # Check for NAs
sum(is.nan(as.matrix(wide_data))) # Check for NaN
sum(is.infinite(as.matrix(wide_data))) # Check for Inf
rownames(wide_data) <- wide_data$Set2
wide_data <- as.data.frame(wide_data)
rownames(wide_data) <- wide_data$Set2
wide_data <- select(wide_data, -c("Set2"))
head(wide_data)
pheatmap(wide_data)
pheatmap(wide_data, show_colnames=FALSE)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)
# Directory containing the BED files
bed_dir <- "byBiosample"
# List all BED files in the directory
bed_files <- list.files(bed_dir, pattern = "\\.bed$", full.names = TRUE)
# Initialize an empty list to store data
peak_data <- list()
# Loop through each BED file
for (file in bed_files) {
# Extract biosample name from the file name (remove directory and .bed extension)
biosample <- gsub("\\.bed$", "", basename(file))
# Read the BED file
bed <- read.table(file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
# Extract peak lengths (end - start)
bed$length <- bed$V3 - bed$V2
# Store the data in the list
peak_data[[biosample]] <- data.frame(
Biosample = biosample,
Length = bed$length
)
}
# Combine all data into a single data frame
all_peaks <- do.call(rbind, peak_data)
# Bar plot: Number of peaks per biosample
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
a <- ggplot(peak_counts, aes(x = PeakCount, y = Biosample)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic()  +
xlab("Peak Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y=element_text(size=5))
b <- ggplot(all_peaks, aes(x = Length, y = Biosample)) +
geom_boxplot(fill = "orange", outlier.shape=NA) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y=element_blank()) +
xlab("Peak Length")
grid.arrange(a,b, nrow=1)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gridExtra)
# Directory containing the BED files
bed_dir <- "byBiosample"
# List all BED files in the directory
bed_files <- list.files(bed_dir, pattern = "\\.bed$", full.names = TRUE)
# Initialize an empty list to store data
peak_data <- list()
# Loop through each BED file
for (file in bed_files) {
# Extract biosample name from the file name (remove directory and .bed extension)
biosample <- gsub("\\.bed$", "", basename(file))
# Read the BED file
bed <- read.table(file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
# Extract peak lengths (end - start)
bed$length <- bed$V3 - bed$V2
# Store the data in the list
peak_data[[biosample]] <- data.frame(
Biosample = biosample,
Length = bed$length
)
}
# Combine all data into a single data frame
all_peaks <- do.call(rbind, peak_data)
# Bar plot: Number of peaks per biosample
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
a <- ggplot(peak_counts, aes(x = PeakCount, y = Biosample)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic()  +
xlab("Peak Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y=element_text(size=5))
b <- ggplot(all_peaks, aes(x = Length, y = Biosample)) +
geom_boxplot(fill = "orange", outlier.shape=NA) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y=element_blank()) +
xlab("Peak Length")
grid.arrange(a,b, nrow=1)
head(all_peaks)
hist(all_peaks$Length)
ggplot(all_peaks, aes(x = Length)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = median(Length)), color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(aes(xintercept = as.numeric(names(sort(table(Length), decreasing = TRUE)[1]))),
color = "blue", linetype = "dashed", linewidth = 1) +
labs(
title = "Distribution of Peak Lengths",
x = "Peak Length (bp)",
y = "Count"
) +
theme_minimal()
ggplot(all_peaks, aes(x = Length)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = median(Length)), color = "red", linetype = "dashed", linewidth = 1) +
geom_vline(aes(xintercept = as.numeric(names(sort(table(Length), decreasing = TRUE)[1]))),
color = "blue", linetype = "dashed", linewidth = 1) +
labs(
title = "Distribution of Peak Lengths",
x = "Peak Length (bp)",
y = "Count"
) +
theme_classic()
# histogram of peak lengths
ggplot(all_peaks, aes(x = Length)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = median(Length)), color = "red", linetype = "dashed", linewidth = 1) +
labs(
title = "Distribution of Peak Lengths Across All Biosamples",
x = "Peak Length (bp)",
y = "Count"
) +
theme_minimal()
# histogram of peak lengths
ggplot(all_peaks, aes(x = Length)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = median(Length)), color = "red", linetype = "dashed", linewidth = 1) +
labs(
title = "Distribution of Peak Lengths Across All Biosamples",
x = "Peak Length (bp)",
y = "Count"
) +
theme_classic()
# histogram of peak lengths
ggplot(all_peaks, aes(x = Length)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = median(Length)), color = "black", linetype = "dashed", linewidth = 1) +
labs(
title = "Distribution of Peak Lengths Across All Biosamples",
x = "Peak Length (bp)",
y = "Count"
) +
theme_classic()
# Bar plot: Number of peaks per biosample
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
peak_counts
# Bar plot: Number of peaks per biosample
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n()) %>%
arrange(desc(PeakCount))
a <- ggplot(peak_counts, aes(x = PeakCount, y = Biosample)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic()  +
xlab("Peak Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y=element_text(size=5))
a
a <- ggplot(peak_counts, aes(x = reorder(Biosample, PeakCount), y = Biosample)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic()  +
xlab("Peak Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y=element_text(size=5))
a
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n()) %>%
arrange(desc(PeakCount))  # Sort by peak count in descending order
# Create bar plot with sorted biosamples
a <- ggplot(peak_counts, aes(x = reorder(Biosample, PeakCount), y = PeakCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic() +
xlab("Biosample") +
ylab("Peak Count") +
coord_flip() +  # Flip axes for better readability
theme(axis.text.y = element_text(size = 5))
a
a <- ggplot(peak_counts, aes(x = reorder(Biosample, PeakCount), y = PeakCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic() +
xlab("Biosample") +
ylab("Peak Count") +
coord_flip() +
scale_y_continuous(trans = "log10") +
theme(axis.text.y = element_text(size = 5))
a
library(ggplot2)
library(dplyr)
library(gridExtra)
# Summarize peak counts and median length, and sort by peak count
peak_summary <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n(), MedianLength = median(Length)) %>%
arrange(desc(PeakCount))  # Sort by peak count
# Create peak count bar plot
a <- ggplot(peak_summary, aes(x = reorder(Biosample, PeakCount), y = PeakCount)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_classic() +
xlab("Biosample") +
ylab("Peak Count") +
coord_flip() +
theme(axis.text.y = element_text(size = 5))
# Create median peak length plot
b <- ggplot(peak_summary, aes(x = reorder(Biosample, PeakCount), y = MedianLength)) +
geom_point(color = "orange", size = 3) +  # Use points instead of boxplots
theme_classic() +
xlab("Biosample") +
ylab("Median Peak Length") +
coord_flip() +  # Flip to match ordering
theme(axis.text.y = element_blank())  # Remove redundant labels
# Arrange plots side by side
grid.arrange(a, b, nrow = 1)
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black") +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths")
# Peak count per biosample histogram
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
hist_peak_counts <- ggplot(peak_counts, aes(x = PeakCount)) +
geom_histogram(binwidth = 5000, fill = "steelblue", color = "black") +
theme_classic() +
xlab("Number of Peaks per Biosample") +
ylab("Count") +
ggtitle("Distribution of Peaks per Biosample")
# Arrange both histograms side by side
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
hist_peak_counts <- ggplot(peak_counts, aes(x = PeakCount)) +
geom_histogram(binwidth = 2500, fill = "steelblue", color = "black") +
theme_classic() +
xlab("Number of Peaks per Biosample") +
ylab("Count") +
ggtitle("Distribution of Peaks per Biosample")
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
all_peaks <- do.call(rbind, peak_data)
median_peak_length <- median(all_peaks$Length, na.rm = TRUE)
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black") +
geom_vline(xintercept = median_peak_length, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = median_peak_length + 200, y = max(..count..), label = paste("Median:", median_peak_length), color = "red", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black") +
geom_vline(xintercept = median_peak_length, color = "red", linetype = "dashed") +
annotate("text", x = median_peak_length + 200, y = max(..count..), label = paste("Median:", median_peak_length), color = "red", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
hist_peak_counts <- ggplot(peak_counts, aes(x = PeakCount)) +
geom_histogram(binwidth = 2500, fill = "steelblue", color = "black") +
theme_classic() +
xlab("Number of Peaks per Biosample") +
ylab("Count") +
ggtitle("Number of Peaks per Biosample")
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
median_peak_length
ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black") +
geom_vline(xintercept = median_peak_length, color = "red", linetype = "dashed") +
annotate("text", x = median_peak_length + 200, y = max(..count..), label = paste("Median:", median_peak_length), color = "red", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
hist_data <- ggplot_build(ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50))$data[[1]]
max_count <- max(hist_data$count)
max_count
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black") +
geom_vline(xintercept = median_peak_length, color = "red", linetype = "dashed") +
annotate("text", x = median_peak_length + 200, y = max(max_count * 0.9), label = paste("Median:", median_peak_length), color = "red", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
hist_peak_length
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "steelblue", color = "black") +
geom_vline(xintercept = median_peak_length, color = "red", linetype = "dashed") +
annotate("text", x = median_peak_length + 200, y = max(max_count * 0.9), label = paste("Median:", median_peak_length), color = "red", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
hist_peak_counts <- ggplot(peak_counts, aes(x = PeakCount)) +
geom_histogram(binwidth = 2500, fill = "steelblue", color = "black") +
theme_classic() +
xlab("Number of Peaks per Biosample") +
ylab("Count") +
ggtitle("Number of Peaks per Biosample")
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "#f4a261", color = "black") +
geom_vline(xintercept = median_peak_length, color = "black", linetype = "dashed") +
annotate("text", x = median_peak_length + 200, y = max(max_count * 0.9), label = paste("Median:", median_peak_length), color = "black", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
hist_peak_counts <- ggplot(peak_counts, aes(x = PeakCount)) +
geom_histogram(binwidth = 2500, fill = "#2a9d8f", color = "black") +
theme_classic() +
xlab("Number of Peaks per Biosample") +
ylab("Count") +
ggtitle("Number of Peaks per Biosample")
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
hist_peak_length <- ggplot(all_peaks, aes(x = Length)) +
geom_histogram(binwidth = 50, fill = "#f4a261") +
geom_vline(xintercept = median_peak_length, color = "black", linetype = "dashed") +
annotate("text", x = median_peak_length + 200, y = max(max_count * 0.9), label = paste("Median:", median_peak_length), color = "black", size = 5, hjust = 0) +
theme_classic() +
xlab("Peak Length (bp)") +
ylab("Count") +
ggtitle("Distribution of Peak Lengths Across All Biosamples")
peak_counts <- all_peaks %>%
group_by(Biosample) %>%
summarise(PeakCount = n())
hist_peak_counts <- ggplot(peak_counts, aes(x = PeakCount)) +
geom_histogram(binwidth = 2500, fill = "#2a9d8f") +
theme_classic() +
xlab("Number of Peaks per Biosample") +
ylab("Count") +
ggtitle("Number of Peaks per Biosample")
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
pdf("peakLengthAndCountHistograms.pdf", height=5, width=10)
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
dev.off()
pdf("peakLengthAndCountHistograms.pdf", height=3, width=10)
grid.arrange(hist_peak_length, hist_peak_counts, nrow = 1)
dev.off()
