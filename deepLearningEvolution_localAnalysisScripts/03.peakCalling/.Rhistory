pheatmap(sampled_data,
show_colnames = FALSE,
color = color_scale,
treeheight_col = 0,
)
sample_groups <- c(
"altai.Neanderthal.A" = "ArchaicHominin",
"chagyrskaya.neanderthal.A" = "ArchaicHominin",
"vindija.neanderthal.A" = "ArchaicHominin",
"denisova.A" = "ArchaicHominin",
"HG00525.A" = "ModernHuman",
"HG02615.A" = "ModernHuman",
"HG03079.A" = "ModernHuman",
"NA18858.A" = "ModernHuman",
"NA20517.A" = "ModernHuman",
"clara.panTroTro.A" = "GreatApe",
"jimmie.panTroVerus.A" = "GreatApe",
"nakuu.panTroSchweinfurthii.A" = "GreatApe",
"taweh.panTroEllioti.A" = "GreatApe",
"natalie.panPaniscus.A" = "GreatApe",
"victoria.gorBeringeiGraueri.A" = "GreatApe",
"dian.gorGorGor.A" = "GreatApe",
"dunja.ponAbe.A" = "GreatApe"
)
peak_open_counts <- colSums(data > 0)
row_groups <- unname(sample_groups[rownames(data)])
# Initialize a list to store group-wise counts
group_peak_counts <- list()
# Loop through each group to compute group-specific column sums
for (group in unique(row_groups)) {
group_indices <- which(row_groups == group)  # Rows for the group
group_data <- data[group_indices, , drop = FALSE]  # Subset matrix
group_peak_counts[[group]] <- colSums(group_data > 0)  # Peaks open in this group
}
# Step 4: Combine and summarize results
summary_df <- data.frame(
Total_Haplotypes = peak_open_counts,
ModernHuman = group_peak_counts$ModernHuman,
ArchaicHominin = group_peak_counts$ArchaicHominin,
Hominin = group_peak_counts$ModernHuman + group_peak_counts$ArchaicHominin,
GreatApe = group_peak_counts$GreatApe
)
heatmap_data <- summary_df %>%
group_by(Hominin, GreatApe) %>%
summarise(Count = n(), .groups = "drop")
# Generate heatmap using ggplot2
ggplot(heatmap_data, aes(x = Hominin, y = GreatApe, fill = Count)) +
geom_tile(color = "white") +  # Tile grid with white border
geom_text(aes(label = Count), color = "black", size = 4) +  # Add raw count labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient for counts
labs(title = "Heatmap of #Hominin vs #GreatApe Peaks",
x = "# Hominin Open Chromatin Peaks",
y = "# Great Ape Open Chromatin Peaks",
fill = "Peak Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot)
library(ggplot2)
# Generate heatmap using ggplot2
ggplot(heatmap_data, aes(x = Hominin, y = GreatApe, fill = Count)) +
geom_tile(color = "white") +  # Tile grid with white border
geom_text(aes(label = Count), color = "black", size = 4) +  # Add raw count labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient for counts
labs(title = "Heatmap of #Hominin vs #GreatApe Peaks",
x = "# Hominin Open Chromatin Peaks",
y = "# Great Ape Open Chromatin Peaks",
fill = "Peak Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# Generate heatmap using ggplot2
ggplot(heatmap_data, aes(x = Hominin, y = GreatApe, fill = Count)) +
geom_tile(color = "white") +  # Tile grid with white border
geom_text(aes(label = Count), color = "black", size = 4) +  # Add raw count labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient for counts
labs(title = "Heatmap of #Hominin vs #GreatApe Peaks",
x = "# Hominin Open Chromatin Peaks",
y = "# Great Ape Open Chromatin Peaks",
fill = "Peak Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pheatmap(sampled_data,
show_colnames = FALSE,
color = color_scale,
treeheight_col = 0,
)
rownames(sampled_data)
annotation_row <- data.frame(Group = sample_groups[rownames(sampled_data)])
rownames(annotation_row) <- rownames(sampled_data)  # Ensure row names match
annotation_colors <- list(
Group = c(
"ArchaicHominin" = "#EAC365",   # Red
"ModernHuman" = "#F4A361",      # Blue
"GreatApe" = "#27A092"          # Green
)
)
color_scale <- colorRampPalette(c("white", "darkgreen"))(50)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
annotation_colors
annotation_row
sample_groups <- c(
# Archaic Hominins
"altai.Neanderthal.A" = "ArchaicHominin",
"altai.Neanderthal.B" = "ArchaicHominin",
"chagyrskaya.neanderthal.A" = "ArchaicHominin",
"chagyrskaya.neanderthal.B" = "ArchaicHominin",
"vindija.neanderthal.A" = "ArchaicHominin",
"vindija.neanderthal.B" = "ArchaicHominin",
"denisova.A" = "ArchaicHominin",
"denisova.B" = "ArchaicHominin",
# Modern Humans
"HG00525.A" = "ModernHuman",
"HG00525.B" = "ModernHuman",
"HG02615.A" = "ModernHuman",
"HG02615.B" = "ModernHuman",
"HG03079.A" = "ModernHuman",
"HG03079.B" = "ModernHuman",
"NA18858.A" = "ModernHuman",
"NA18858.B" = "ModernHuman",
"NA20517.A" = "ModernHuman",
"NA20517.B" = "ModernHuman",
# Great Apes
"clara.panTroTro.A" = "GreatApe",
"clara.panTroTro.B" = "GreatApe",
"jimmie.panTroVerus.A" = "GreatApe",
"jimmie.panTroVerus.B" = "GreatApe",
"nakuu.panTroSchweinfurthii.A" = "GreatApe",
"nakuu.panTroSchweinfurthii.B" = "GreatApe",
"taweh.panTroEllioti.A" = "GreatApe",
"taweh.panTroEllioti.B" = "GreatApe",
"natalie.panPaniscus.A" = "GreatApe",
"natalie.panPaniscus.B" = "GreatApe",
"victoria.gorBeringeiGraueri.A" = "GreatApe",
"victoria.gorBeringeiGraueri.B" = "GreatApe",
"dian.gorGorGor.A" = "GreatApe",
"dian.gorGorGor.B" = "GreatApe",
"dunja.ponAbe.A" = "GreatApe",
"dunja.ponAbe.B" = "GreatApe"
)
annotation_row <- data.frame(Group = sample_groups[rownames(sampled_data)])
rownames(annotation_row) <- rownames(sampled_data)  # Ensure row names match
annotation_colors <- list(
Group = c(
"ArchaicHominin" = "#EAC365",   # Red
"ModernHuman" = "#F4A361",      # Blue
"GreatApe" = "#27A092"          # Green
)
)
color_scale <- colorRampPalette(c("white", "darkgreen"))(50)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
pdf("brainAccessibility.pdf", height=6, width=10)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
dev.off()
dev.off()
dim(sampled_data)
pdf("brainAccessibility.pdf", height=6, width=10)
pheatmap(sampled_data,
show_colnames = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
dev.off()
pheatmap(sampled_data,
show_colnames = FALSE,
cluster_rows = FALSE,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0,
)
output_dir <- "rdsFigures/"
rds_dir <- "rds/"
output_dir <- "rdsFigures/"
library(pheatmap)
rds_dir <- "rds/"
output_dir <- "rdsFigures/"
dir.create(output_dir, showWarnings = FALSE)
sample_groups <- c(
# Modern Humans
"HG00525.A" = "ModernHuman", "HG00525.B" = "ModernHuman",
"HG02615.A" = "ModernHuman", "HG02615.B" = "ModernHuman",
"HG03079.A" = "ModernHuman", "HG03079.B" = "ModernHuman",
"NA18858.A" = "ModernHuman", "NA18858.B" = "ModernHuman",
"NA20517.A" = "ModernHuman", "NA20517.B" = "ModernHuman",
# Archaic Hominins
"altai.Neanderthal.A" = "ArchaicHominin", "altai.Neanderthal.B" = "ArchaicHominin",
"chagyrskaya.neanderthal.A" = "ArchaicHominin", "chagyrskaya.neanderthal.B" = "ArchaicHominin",
"vindija.neanderthal.A" = "ArchaicHominin", "vindija.neanderthal.B" = "ArchaicHominin",
"denisova.A" = "ArchaicHominin", "denisova.B" = "ArchaicHominin",
# Great Apes (phylogenetic order: Chimpanzee → Bonobo → Gorilla → Orangutan)
"clara.panTroTro.A" = "GreatApe", "clara.panTroTro.B" = "GreatApe",
"jimmie.panTroVerus.A" = "GreatApe", "jimmie.panTroVerus.B" = "GreatApe",
"nakuu.panTroSchweinfurthii.A" = "GreatApe", "nakuu.panTroSchweinfurthii.B" = "GreatApe",
"taweh.panTroEllioti.A" = "GreatApe", "taweh.panTroEllioti.B" = "GreatApe",
"natalie.panPaniscus.A" = "GreatApe", "natalie.panPaniscus.B" = "GreatApe",  # Bonobo
"victoria.gorBeringeiGraueri.A" = "GreatApe", "victoria.gorBeringeiGraueri.B" = "GreatApe",  # Gorilla
"dian.gorGorGor.A" = "GreatApe", "dian.gorGorGor.B" = "GreatApe",
"dunja.ponAbe.A" = "GreatApe", "dunja.ponAbe.B" = "GreatApe"  # Orangutan
)
# Define custom annotation colors
annotation_colors <- list(
Group = c(
"ModernHuman" = "#F4A361",      # Orange
"ArchaicHominin" = "#EAC365",   # Yellow
"GreatApe" = "#27A092"          # Teal
)
)
# Define a fixed order for rows (Modern → Archaic → Great Ape (phylogenetic order))
fixed_row_order <- names(sample_groups)
# Define a color scale for the heatmap
color_scale <- colorRampPalette(c("white", "darkgreen"))(50)
# Process each .rds file
rds_files <- list.files(rds_dir, pattern = "\\.rds$", full.names = TRUE)
for (file in rds_files) {
cat("Processing:", file, "\n")
# Read RDS file
data <- readRDS(file)
# Filter peaks to remove low-accessibility elements
filtered_data <- data[, colSums(data) >= 5]
# Sample a subset of columns for visualization
sampled_cols <- sample(1:ncol(filtered_data), size = min(30000, ncol(filtered_data)))  # Avoid sampling more than available columns
sampled_data <- filtered_data[, sampled_cols]
# Ensure rows follow the fixed order (subset to existing ones in the data)
ordered_rows <- intersect(fixed_row_order, rownames(sampled_data))
sampled_data <- sampled_data[ordered_rows, , drop = FALSE]  # Reorder
# Create annotation data frame
annotation_row <- data.frame(Group = sample_groups[rownames(sampled_data)])
rownames(annotation_row) <- rownames(sampled_data)  # Ensure row names match
# Generate a unique output filename
biosample_name <- gsub("\\.rds$", "", basename(file))
output_pdf <- file.path(output_dir, paste0(biosample_name, "_heatmap.pdf"))
# Generate and save heatmap
pdf(output_pdf, height = 6, width = 10)
pheatmap(
mat = sampled_data,
show_colnames = FALSE,
cluster_rows = FALSE,  # KEEP ROW ORDER FIXED
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = color_scale,
treeheight_col = 0
)
dev.off()
cat("Saved heatmap:", output_pdf, "\n")
}
library(Matrix)
library(pheatmap)
set.seed(42)
library(pheatmap)
rds_dir <- "rds/"
output_dir <- "rdsFigures/"
dir.create(output_dir, showWarnings = FALSE)
sample_groups <- c(
# Modern Humans
"HG00525.A" = "ModernHuman", "HG00525.B" = "ModernHuman",
"HG02615.A" = "ModernHuman", "HG02615.B" = "ModernHuman",
"HG03079.A" = "ModernHuman", "HG03079.B" = "ModernHuman",
"NA18858.A" = "ModernHuman", "NA18858.B" = "ModernHuman",
"NA20517.A" = "ModernHuman", "NA20517.B" = "ModernHuman",
# Archaic Hominins
"altai.Neanderthal.A" = "ArchaicHominin", "altai.Neanderthal.B" = "ArchaicHominin",
"chagyrskaya.neanderthal.A" = "ArchaicHominin", "chagyrskaya.neanderthal.B" = "ArchaicHominin",
"vindija.neanderthal.A" = "ArchaicHominin", "vindija.neanderthal.B" = "ArchaicHominin",
"denisova.A" = "ArchaicHominin", "denisova.B" = "ArchaicHominin",
# Great Apes (phylogenetic order: Chimpanzee → Bonobo → Gorilla → Orangutan)
"clara.panTroTro.A" = "GreatApe", "clara.panTroTro.B" = "GreatApe",
"jimmie.panTroVerus.A" = "GreatApe", "jimmie.panTroVerus.B" = "GreatApe",
"nakuu.panTroSchweinfurthii.A" = "GreatApe", "nakuu.panTroSchweinfurthii.B" = "GreatApe",
"taweh.panTroEllioti.A" = "GreatApe", "taweh.panTroEllioti.B" = "GreatApe",
"natalie.panPaniscus.A" = "GreatApe", "natalie.panPaniscus.B" = "GreatApe",  # Bonobo
"victoria.gorBeringeiGraueri.A" = "GreatApe", "victoria.gorBeringeiGraueri.B" = "GreatApe",  # Gorilla
"dian.gorGorGor.A" = "GreatApe", "dian.gorGorGor.B" = "GreatApe",
"dunja.ponAbe.A" = "GreatApe", "dunja.ponAbe.B" = "GreatApe"  # Orangutan
)
# Define custom annotation colors
annotation_colors <- list(
Group = c(
"ModernHuman" = "#F4A361",      # Orange
"ArchaicHominin" = "#EAC365",   # Yellow
"GreatApe" = "#27A092"          # Teal
)
)
# Define a fixed order for rows (Modern → Archaic → Great Ape (phylogenetic order))
fixed_row_order <- names(sample_groups)
# Define a color scale for the heatmap
color_scale <- colorRampPalette(c("white", "darkgreen"))(50)
# Process each .rds file
rds_files <- list.files(rds_dir, pattern = "\\.rds$", full.names = TRUE)
for (file in rds_files) {
cat("Processing:", file, "\n")
# Read RDS file
data <- readRDS(file)
# Filter peaks to remove low-accessibility elements
filtered_data <- data[, colSums(data) >= 5]
# Sample a subset of columns for visualization
sampled_cols <- sample(1:ncol(filtered_data), size = min(30000, ncol(filtered_data)))  # Avoid sampling more than available columns
sampled_data <- filtered_data[, sampled_cols]
# Ensure rows follow the fixed order (subset to existing ones in the data)
ordered_rows <- intersect(fixed_row_order, rownames(sampled_data))
sampled_data <- sampled_data[ordered_rows, , drop = FALSE]  # Reorder
# Create annotation data frame
annotation_row <- data.frame(Group = sample_groups[rownames(sampled_data)])
rownames(annotation_row) <- rownames(sampled_data)  # Ensure row names match
# Generate a unique output filename
biosample_name <- gsub("\\.rds$", "", basename(file))
output_png <- file.path(output_dir, paste0(biosample_name, "_heatmap.png"))
# Generate and save heatmap
png(output_png, height = 6, width = 12, units="in", res=300)
pheatmap(
mat = sampled_data,
show_colnames = FALSE,
show_rownames = FALSE,
cluster_rows = FALSE,  # KEEP ROW ORDER FIXED
annotation_row = annotation_row,
annotation_colors = annotation_colors,
legend = FALSE,
color = color_scale,
treeheight_col = 0
)
dev.off()
cat("Saved heatmap:", output_pdf, "\n")
}
for (file in rds_files) {
cat("Processing:", file, "\n")
# Read RDS file
data <- readRDS(file)
# Filter peaks to remove low-accessibility elements
filtered_data <- data[, colSums(data) >= 5]
# Sample a subset of columns for visualization
sampled_cols <- sample(1:ncol(filtered_data), size = min(30000, ncol(filtered_data)))  # Avoid sampling more than available columns
sampled_data <- filtered_data[, sampled_cols]
# Ensure rows follow the fixed order (subset to existing ones in the data)
ordered_rows <- intersect(fixed_row_order, rownames(sampled_data))
sampled_data <- sampled_data[ordered_rows, , drop = FALSE]  # Reorder
# Create annotation data frame
annotation_row <- data.frame(Group = sample_groups[rownames(sampled_data)])
rownames(annotation_row) <- rownames(sampled_data)  # Ensure row names match
# Generate a unique output filename
biosample_name <- gsub("\\.rds$", "", basename(file))
output_png <- file.path(output_dir, paste0(biosample_name, "_heatmap.png"))
# Generate and save heatmap
png(output_png, height = 6, width = 12, units="in", res=300)
pheatmap(
mat = sampled_data,
show_colnames = FALSE,
show_rownames = FALSE,
cluster_rows = FALSE,  # KEEP ROW ORDER FIXED
annotation_row = annotation_row,
annotation_colors = annotation_colors,
legend = FALSE,
color = color_scale,
treeheight_col = 0
)
dev.off()
cat("Saved heatmap:", output_png, "\n")
}
for (file in rds_files) {
cat("Processing:", file, "\n")
# Read RDS file
data <- readRDS(file)
# Filter peaks to remove low-accessibility elements
filtered_data <- data[, colSums(data) >= 5]
# Sample a subset of columns for visualization
sampled_cols <- sample(1:ncol(filtered_data), size = min(30000, ncol(filtered_data)))  # Avoid sampling more than available columns
sampled_data <- filtered_data[, sampled_cols]
# Ensure rows follow the fixed order (subset to existing ones in the data)
ordered_rows <- intersect(fixed_row_order, rownames(sampled_data))
sampled_data <- sampled_data[ordered_rows, , drop = FALSE]  # Reorder
# Create annotation data frame
annotation_row <- data.frame(Group = sample_groups[rownames(sampled_data)])
rownames(annotation_row) <- rownames(sampled_data)  # Ensure row names match
# Generate a unique output filename
biosample_name <- gsub("\\.rds$", "", basename(file))
output_png <- file.path(output_dir, paste0(biosample_name, "_heatmap.png"))
# Generate and save heatmap
png(output_png, height = 6, width = 15, units="in", res=300)
pheatmap(
mat = sampled_data,
show_colnames = FALSE,
show_rownames = FALSE,
cluster_rows = FALSE,  # KEEP ROW ORDER FIXED
annotation_row = annotation_row,
annotation_colors = annotation_colors,
legend = FALSE,
color = color_scale,
treeheight_col = 0
)
dev.off()
cat("Saved heatmap:", output_png, "\n")
}
##### REG ELEMENTS ENRICHMENTS ####
data <- read.csv("regElementsEnrichments.txt", header=TRUE, sep="\t")
head(data)
data$Biosample <- sub("unionSetsHg38/(.*)\\.unionSet\\.bed", "\\1", data$Filename2)
head(data)
##### REG ELEMENTS ENRICHMENTS ####
library(ggpubr)
data$PropRegElement <- data$OverlapCount / data$LenElements2
ggbarplot(data, "Biosample", "PropRegElement")
ggbarplot(data, "PropRegElement", "Biosample")
ggbarplot(data, "Biosample", "PropRegElement") + coord_flip()
hist(data$PropRegElement)
mean(data$PropRegElement)
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653", alpha=0.5)
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1)
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "red", size = 5, hjust = -0.1)
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "black", size = 5, hjust = -0.1) +
theme_classic()
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "black", size = 5, hjust = -0.1) +
theme_classic() +
xlab("Proportion of Open Chromatin Elements Overlapping Known Regulatory States") +
ylab("Frequency") +
ggtitle("Distribution of Regulatory Overlap Across Biosamples")
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "black", size = 5, hjust = -0.1) +
theme_classic() +
xlab("Proportion of Open Chromatin Elements Overlapping EpiMap ChromHMM Regulatory States") +
ylab("Number of Biosamples") +
ggtitle("Proportion of Enformer-Predicted Open Chromatin Elements Overlapping EpiMap ChromHmm Regulatory States Across Biosamples")
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "black", size = 5, hjust = -0.1) +
theme_classic() +
xlab("Regulatory State Overlap of Enformer-Predicted Open Chromatin Elements") +
ylab("Number of Biosamples") +
ggtitle("Proportion of Enformer-Predicted Open Chromatin Elements Overlapping EpiMap ChromHmm Regulatory States Across Biosamples")
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "black", size = 5, hjust = -0.1) +
theme_classic() +
xlab("Proportion of Open Chromatin Elements Overlapping EpiMap ChromHMM Regulatory States") +
ylab("Number of Biosamples") +
ggtitle("Regulatory State Overlap of Enformer-Predicted Open Chromatin Elements")
dev.off()
library(ggpubr)
data <- read.csv("regElementsEnrichments.txt", header=TRUE, sep="\t")
data$Biosample <- sub("unionSetsHg38/(.*)\\.unionSet\\.bed", "\\1", data$Filename2)
data$PropRegElement <- data$OverlapCount / data$LenElements2
pdf("regOverlapPanel.pdf", height=4, width=6)
ggplot(data, aes(x=PropRegElement)) +
geom_histogram(binwidth = 0.002, fill="#264653") +
geom_vline(aes(xintercept = mean(PropRegElement)), color = "black", linetype="dashed", size = 1) +
annotate("text", x = mean(data$PropRegElement), y = max(table(cut(data$PropRegElement, breaks=20))) * 0.9,
label = paste("Mean:", round(mean(data$PropRegElement), 3)), color = "black", size = 5, hjust = -0.1) +
theme_classic() +
xlab("Proportion of Open Chromatin Elements Overlapping EpiMap ChromHMM Regulatory States") +
ylab("Number of Biosamples") +
ggtitle("Regulatory State Overlap of Enformer-Predicted Open Chromatin Elements")
dev.off()
