mergedData <- rbind(noChangeData, upInHomininData, upInGreatApesData)
table(mergedData$Change)
gghistogram(mergedData,  "length", y="..density..", facet.by="Change", fill="Change", bins=50) + xlim(0, 4000)
medians <- mergedData %>%
group_by(Change) %>%
summarize(median_length = median(length, na.rm = TRUE))
pdf("pdf/lengthDistributions.pdf", height=4, width=4)
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
dev.off()
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
medians <- mergedData %>%
group_by(Change) %>%
summarize(median_length = median(length, na.rm = TRUE))
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
library(ggpubr)
library(dplyr)
library(tidyr)
processBeds <- function(bedFile, condition) {
data <- read.csv(bedFile, header=FALSE, sep="\t")
colnames(data) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLogPAdj")
data$name <- paste(data$chr, data$start, data$end, sep=".")
data$length <- data$end - data$start
data$Change <- condition
return(data)
}
upInHomininData <- processBeds("upInHominins.merged.bed", "upInHominins")
upInGreatApesData <- processBeds("upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processBeds("noChange.merged.bed", "noChange")
mergedData <- rbind(noChangeData, upInHomininData, upInGreatApesData)
table(mergedData$Change)
gghistogram(mergedData,  "length", y="..density..", facet.by="Change", fill="Change", bins=50) + xlim(0, 4000)
medians <- mergedData %>%
group_by(Change) %>%
summarize(median_length = median(length, na.rm = TRUE))
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
divergentRegions <- rbind(upInHomininData, upInGreatApesData)
divMin <- min(divergentRegions$length, na.rm=TRUE)
divMax <- max(divergentRegions$length, na.rm=TRUE)
noChangeDataFiltered <- noChangeData %>%
filter(length >= divMin & length <= divMax)
binBreaks <- quantile(divergentRegions$length,
probs = seq(0, 1, length.out = 50),
na.rm = TRUE)
binBreaks <- unique(binBreaks)  # remove duplicates if any
noChangeDataFiltered <- noChangeDataFiltered %>%
mutate(bin = cut(length, breaks = binBreaks, include.lowest = TRUE))
divergentRegions <- divergentRegions %>%
mutate(bin = cut(length, breaks = binBreaks, include.lowest = TRUE))
binCountsDivergent <- divergentRegions %>%
group_by(bin) %>%
summarise(n_div = n(), .groups = "drop")
binCountsNoChange <- noChangeDataFiltered %>%
group_by(bin) %>%
summarise(n_noChange = n(), .groups = "drop")
binSampleSizes <- binCountsDivergent %>%
left_join(binCountsNoChange, by = "bin") %>%
mutate(
n_noChange = ifelse(is.na(n_noChange), 0, n_noChange),
sampleSize = pmin(n_div, n_noChange)  # example: 1-to-1 match
) %>%
select(bin, sampleSize)
set.seed(123)
noChangeSubsample <- data.frame()
for (i in seq_len(nrow(binSampleSizes))) {
thisBin <- binSampleSizes$bin[i]
thisN   <- binSampleSizes$sampleSize[i]
df_candidates <- noChangeDataFiltered[noChangeDataFiltered$bin == thisBin, ]
toSample <- min(nrow(df_candidates), thisN)
sampledDF <- df_candidates %>%
dplyr::slice_sample(n = toSample)
noChangeSubsample <- rbind(noChangeSubsample, sampledDF)
}
noChangeSubsample <- noChangeSubsample %>% select(-bin)
noChangeSubsample$Change <- "noChangeSubsample"
mergedData <- rbind(mergedData, noChangeSubsample)
gghistogram(mergedData,  "length", y="density", facet.by="Change", fill="Change") + xlim(0, 4000)
write_bed <- function(df, filename) {
bed <- df %>%
mutate(
start = as.integer(start),
end = as.integer(end)
) %>%
select(chr, start, end, name)
write.table(bed, file = filename, quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
}
write_bed(noChangeSubsample, "noChange.subsampled.merged.bed")
library(dplyr)
library(tidyr)
library(stringr)
library(ggpubr)
library(ggrepel)
# Define directories
dirs <- list(
BackgroundRegions = "backgroundRegions",
UpInHominins = "upInHominins",
UpInGreatApes = "upInGreatApes"
)
count_lines <- function(file) {
count_str <- system(paste("wc -l", shQuote(file)), intern = TRUE)
count <- as.integer(str_trim(str_extract(count_str, "^\\s*\\d+")))  # Trim and extract the number
return(count)
}
results <- list()
for (category in names(dirs)) {
files <- list.files(dirs[[category]], pattern = "\\.bed$", full.names = TRUE)
for (file in files) {
biosample <- str_extract(basename(file), "^[^.]+")
line_count <- count_lines(file)
results <- append(results, list(data.frame(Biosample = biosample, Category = category, Count = line_count)))
}
}
df <- bind_rows(results) %>%
pivot_wider(names_from = Category, values_from = Count, values_fill = 0)  # Fill missing values with 0
data <- as.data.frame(df)
data$Unchanged <- data$BackgroundRegions - data$UpInHominins - data$UpInGreatApes
data$PropUnchanged <- data$Unchanged / data$BackgroundRegions
data$PropUpInHominins <- data$UpInHominins / data$BackgroundRegions
data$PropUpInGreatApes <- data$UpInGreatApes / data$BackgroundRegions
data$TotalPropChanged <- data$PropUpInHominins + data$PropUpInGreatApes
data$Biosample <- factor(data$Biosample, levels = data$Biosample[order(data$TotalPropChanged, decreasing = TRUE)])
tallData <- data %>%
pivot_longer(cols = c(PropUpInHominins, PropUpInGreatApes), names_to = "Category", values_to = "Prop")
ggplot(tallData, aes(x=Biosample, y=Prop, fill=Category)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("PropUpInHominins" = "#DC143C",
"PropUpInGreatApes" = "#1E3A8A")) +
theme_classic() +
coord_flip() +
labs(title="Hominin-Great Ape Divergent Regulatory Elements across Biosamples", y="Proportion of Open Chromatin Elements") +
theme(axis.text.y=element_text(size=6))
ggscatter(data, "PropUpInHominins", "PropUpInGreatApes", label="Biosample") + geom_abline(intercept=0, slope=1, linetype="dashed")
plot_data <- data %>%
mutate(UpInGreatApes = -UpInGreatApes)
plot_data <- plot_data %>%
arrange(desc(abs(UpInHominins) + abs(UpInGreatApes)))
library(ggpubr)
library(dplyr)
library(tidyr)
processBeds <- function(bedFile, condition) {
data <- read.csv(bedFile, header=FALSE, sep="\t")
colnames(data) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLogPAdj")
data$name <- paste(data$chr, data$start, data$end, sep=".")
data$length <- data$end - data$start
data$Change <- condition
return(data)
}
upInHomininData <- processBeds("upInHominins.merged.bed", "upInHominins")
upInGreatApesData <- processBeds("upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processBeds("noChange.merged.bed", "noChange")
mergedData <- rbind(noChangeData, upInHomininData, upInGreatApesData)
table(mergedData$Change)
gghistogram(mergedData,  "length", y="..density..", facet.by="Change", fill="Change", bins=50) + xlim(0, 4000)
medians <- mergedData %>%
group_by(Change) %>%
summarize(median_length = median(length, na.rm = TRUE))
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
divergentRegions <- rbind(upInHomininData, upInGreatApesData)
divMin <- min(divergentRegions$length, na.rm=TRUE)
divMax <- max(divergentRegions$length, na.rm=TRUE)
noChangeDataFiltered <- noChangeData %>%
filter(length >= divMin & length <= divMax)
binBreaks <- quantile(divergentRegions$length,
probs = seq(0, 1, length.out = 50),
na.rm = TRUE)
binBreaks <- unique(binBreaks)  # remove duplicates if any
noChangeDataFiltered <- noChangeDataFiltered %>%
mutate(bin = cut(length, breaks = binBreaks, include.lowest = TRUE))
divergentRegions <- divergentRegions %>%
mutate(bin = cut(length, breaks = binBreaks, include.lowest = TRUE))
binCountsDivergent <- divergentRegions %>%
group_by(bin) %>%
summarise(n_div = n(), .groups = "drop")
binCountsNoChange <- noChangeDataFiltered %>%
group_by(bin) %>%
summarise(n_noChange = n(), .groups = "drop")
binSampleSizes <- binCountsDivergent %>%
left_join(binCountsNoChange, by = "bin") %>%
mutate(
n_noChange = ifelse(is.na(n_noChange), 0, n_noChange),
sampleSize = pmin(n_div, n_noChange)  # example: 1-to-1 match
) %>%
select(bin, sampleSize)
set.seed(123)
noChangeSubsample <- data.frame()
for (i in seq_len(nrow(binSampleSizes))) {
thisBin <- binSampleSizes$bin[i]
thisN   <- binSampleSizes$sampleSize[i]
df_candidates <- noChangeDataFiltered[noChangeDataFiltered$bin == thisBin, ]
toSample <- min(nrow(df_candidates), thisN)
sampledDF <- df_candidates %>%
dplyr::slice_sample(n = toSample)
noChangeSubsample <- rbind(noChangeSubsample, sampledDF)
}
noChangeSubsample <- noChangeSubsample %>% select(-bin)
noChangeSubsample$Change <- "noChangeSubsample"
mergedData <- rbind(mergedData, noChangeSubsample)
gghistogram(mergedData,  "length", y="density", facet.by="Change", fill="Change") + xlim(0, 4000)
write_bed <- function(df, filename) {
bed <- df %>%
mutate(
start = as.integer(start),
end = as.integer(end)
) %>%
select(chr, start, end, name)
write.table(bed, file = filename, quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)
}
library(ggpubr)
library(dplyr)
library(tidyr)
library(gridExtra)
files <- list.files("hopsOverlapsPValue", pattern = "\\.txt$", full.names = TRUE)
data_list <- list()
for (file in files) {
df <- read.csv(file, header = FALSE, sep = "\t")
colnames(df) <- c("Chr", "Start", "End", "Pn_pValue")
filename <- tools::file_path_sans_ext(basename(file))
df$Condition <- filename
data_list[[filename]] <- df
}
mergedData <- do.call(rbind, data_list)
mergedData$minusLogP <- -log10(mergedData$Pn_pValue)
sig_threshold <- 3
# use Wald's method to estimate SE
prop_data <- mergedData %>%
mutate(Significant = minusLogP > sig_threshold) %>%
group_by(Condition) %>%
summarise(
Count_Significant = sum(Significant),
Count_Not_Significant = sum(!Significant),
Total = n(),
PropSig = Count_Significant / Total,
CI_lower = PropSig - 1.96 * sqrt((PropSig * (1 - PropSig)) / Total),
CI_upper = PropSig + 1.96 * sqrt((PropSig * (1 - PropSig)) / Total),
.groups = "drop"
) %>%
mutate(
# Split Condition string and extract State (2nd last) and Group (4th last)
State = sapply(strsplit(Condition, "\\."), function(x) ifelse(length(x) >= 2, x[length(x)-1], NA)),
Group = sapply(strsplit(Condition, "\\."), function(x) ifelse(length(x) >= 4, x[length(x)-3], NA))
)
tssData <- subset(prop_data, State=="TssA")
a <- ggplot(tssData, aes(x = Condition, y = PropSig, fill = Condition)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper), width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual(values = rev(c("#E96D4E", "#254857", "#6D6E71", "#000000"))) +
theme_classic() +
labs(y = "Proportion of Overlapping Variants with Significant Horizonal Pleiotropy", x = "", title="TssA") +
theme(legend.position = "none") + coord_flip()
pairwise_fisher_test <- function(row1, row2) {
test_matrix <- matrix(
c(row1$Count_Significant, row1$Count_Not_Significant,
row2$Count_Significant, row2$Count_Not_Significant),
nrow = 2, byrow = TRUE
)
test_result <- fisher.test(test_matrix)
return(test_result$p.value)
}
pairwise_results <- expand.grid(Condition1 = tssData$Condition,
Condition2 = tssData$Condition,
stringsAsFactors = FALSE) %>%
filter(Condition1 != Condition2) %>%  # Avoid self-comparisons
arrange(Condition1, Condition2) %>%
distinct() %>%
rowwise() %>%
mutate(p_value = {
row1 <- prop_data %>% filter(Condition == Condition1)
row2 <- prop_data %>% filter(Condition == Condition2)
if (nrow(row1) > 0 & nrow(row2) > 0) {
pairwise_fisher_test(row1, row2)
} else {
NA
}
})
pairwise_results$pAdj <- p.adjust(pairwise_results$p_value, method="fdr")
otherRegData <- subset(prop_data, State=="OtherRegulatoryStates")
b <- ggplot(otherRegData, aes(x = Condition, y = PropSig, fill = Condition)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper), width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual(values = rev(c("#E96D4E", "#254857", "#6D6E71", "#000000"))) +
theme_classic() +
labs(y = "Proportion of Overlapping Variants with Significant Horizonal Pleiotropy", x = "", title="Other Regulatory States") +
theme(legend.position = "none") + coord_flip()
otherReg_pairwise_results <- expand.grid(Condition1 = otherRegData$Condition,
Condition2 = otherRegData$Condition,
stringsAsFactors = FALSE) %>%
filter(Condition1 != Condition2) %>%  # Avoid self-comparisons
arrange(Condition1, Condition2) %>%
distinct() %>%
rowwise() %>%
mutate(p_value = {
row1 <- prop_data %>% filter(Condition == Condition1)
row2 <- prop_data %>% filter(Condition == Condition2)
if (nrow(row1) > 0 & nrow(row2) > 0) {
pairwise_fisher_test(row1, row2)
} else {
NA
}
})
otherReg_pairwise_results$pAdj <- p.adjust(otherReg_pairwise_results$p_value, method="fdr")
grid.arrange(a,b)
library(ggpubr)
library(dplyr)
library(tidyr)
processBeds <- function(bedFile, condition) {
data <- read.csv(bedFile, header=FALSE, sep="\t")
colnames(data) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLogPAdj")
data$name <- paste(data$chr, data$start, data$end, sep=".")
data$length <- data$end - data$start
data$Change <- condition
return(data)
}
upInHomininData <- processBeds("upInHominins.merged.bed", "upInHominins")
upInGreatApesData <- processBeds("upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processBeds("noChange.merged.bed", "noChange")
mergedData <- rbind(noChangeData, upInHomininData, upInGreatApesData)
table(mergedData$Change)
gghistogram(mergedData,  "length", y="..density..", facet.by="Change", fill="Change", bins=50) + xlim(0, 4000)
medians <- mergedData %>%
group_by(Change) %>%
summarize(median_length = median(length, na.rm = TRUE))
ggplot(mergedData, aes(x = length, color = Change)) +
stat_ecdf(geom = "step", size = 1) +  # Draws CDF curves
xlim(400, 4000) +
labs(title = "Shorter Open Chromatin Elements Are More Likely to Exhibit Divergent Accessibility",
x = "Element Length (bp)",
y = "Cumulative Probability") +
theme_classic() +
scale_color_manual(values = c("#6D6E71", "#254857", "#E96D4E")) +
theme(legend.position="none")
pairwise_results <- pairwise.t.test(mergedData$length, mergedData$Change,
p.adjust.method = "bonferroni")
pairwise_results
library(dplyr)
library(ggpubr)
library(stringr)
library(gridExtra)
files <- list.files("phyloP", pattern = "\\.txt$", full.names = TRUE)
mergedData <- list()
for (file in files) {
rawData <- read.delim(file, header = FALSE)
if (ncol(rawData) >= 5) {
formattedData <- rawData %>%
select(V1, V5) %>%
rename(Chr = V1, PhyloP = V5) %>%
mutate(Filename = basename(file))  # Extract just the filename
mergedData[[file]] <- formattedData
}
}
finalData <- bind_rows(mergedData)
finalData <- finalData %>%
mutate(
Condition = str_extract(Filename, "^[^.]+"),  # Everything before first '.'
PhyloP_Type = str_extract(Filename, "(mammal|primate)PhyloP"),  # Extract "MammalPhyloP" or "PrimatePhyloP"
State = sapply(str_split(Filename, "\\."), function(x) x[length(x) - 2])
)
collapsedData <- subset(finalData,
State %in% c("TssA", "OtherRegulatoryStates") &
PhyloP_Type %in% c("mammalPhyloP", "primatePhyloP"))
# Clean up labels for facets
collapsedData$State <- factor(collapsedData$State,
levels = c("TssA", "OtherRegulatoryStates"),
labels = c("TssA Elements", "Other Regulatory Elements"))
collapsedData$PhyloP_Type <- factor(collapsedData$PhyloP_Type,
levels = c("mammalPhyloP", "primatePhyloP"),
labels = c("Mammal Conservation", "Primate Conservation"))
# Create a single facetted plot
collapsedPlot <- ggboxplot(collapsedData, x="Condition", y="PhyloP", fill="Filename", color="Filename",
alpha=0.5, outlier.shape=NA, palette=custom_colors) +
geom_hline(yintercept=0, linetype="dashed") +
coord_flip() +
ylim(-1, 1) +
facet_grid(PhyloP_Type ~ State) +
theme_classic() +
theme(legend.position = "none") +
labs(x="", y="PhyloP", title="Conservation Across Element Classes and Lineages")
pairwise.t.test(
x = tssMammalData$PhyloP,
g = tssMammalData$Filename,
p.adjust.method = "bonferroni"
)
# Create a single facetted plot
collapsedPlot <- ggboxplot(collapsedData, x="Condition", y="PhyloP", fill="Filename", color="Filename",
alpha=0.5, outlier.shape=NA, palette=custom_colors) +
geom_hline(yintercept=0, linetype="dashed") +
coord_flip() +
ylim(-1, 1) +
facet_grid(PhyloP_Type ~ State) +
theme_classic() +
theme(legend.position = "none") +
labs(x="", y="PhyloP", title="Conservation Across Element Classes and Lineages")
# Create a single facetted plot
collapsedPlot <- ggboxplot(collapsedData, x="Condition", y="PhyloP", fill="Filename", color="Filename",
alpha=0.5, outlier.shape=NA) +
geom_hline(yintercept=0, linetype="dashed") +
coord_flip() +
ylim(-1, 1) +
facet_grid(PhyloP_Type ~ State) +
theme_classic() +
theme(legend.position = "none") +
labs(x="", y="PhyloP", title="Conservation Across Element Classes and Lineages")
collapsedPlot
custom_colors <- c("#E96D4E", "#254857", "#6D6E71", "#000000")
# Create a single facetted plot
collapsedPlot <- ggboxplot(collapsedData, x="Condition", y="PhyloP", fill="Filename", color="Filename",
alpha=0.5, outlier.shape=NA, , palette=custom_colors) +
geom_hline(yintercept=0, linetype="dashed") +
coord_flip() +
ylim(-1, 1) +
facet_grid(PhyloP_Type ~ State) +
theme_classic() +
theme(legend.position = "none") +
labs(x="", y="PhyloP", title="Conservation Across Element Classes and Lineages")
# Create a single facetted plot
collapsedPlot <- ggboxplot(collapsedData, x="Condition", y="PhyloP", fill="Filename", color="Filename",
alpha=0.5, outlier.shape=NA, palette=custom_colors) +
geom_hline(yintercept=0, linetype="dashed") +
coord_flip() +
ylim(-1, 1) +
facet_grid(PhyloP_Type ~ State) +
theme_classic() +
theme(legend.position = "none") +
labs(x="", y="PhyloP", title="Conservation Across Element Classes and Lineages")
ggboxplot(collapsedData, x="Condition", y="PhyloP", fill="Filename", color="Filename",
alpha=0.5, outlier.shape=NA, palette=custom_colors) +
geom_hline(yintercept=0, linetype="dashed") +
coord_flip() +
ylim(-1, 1) +
facet_grid(PhyloP_Type ~ State) +
theme_classic() +
theme(legend.position = "none") +
labs(x="", y="PhyloP", title="Conservation Across Element Classes and Lineages")
pairwise.t.test(
x = tssMammalData$PhyloP,
g = tssMammalData$Filename,
p.adjust.method = "bonferroni"
)
head(collapsedData)
unique(colapsedData$State)
unique(collapsedData$State)
tssMammalData <- subset(collapsedData, PhyloP_Type == "Mammal Conservation" & State == "TssA Elements")
pairwise.t.test(
x = tssMammalData$PhyloP,
g = tssMammalData$Filename,
p.adjust.method = "bonferroni"
)
tssPrimateData <- subset(collapsedData, PhyloP_Type == "Primate Conservation" & State == "TssA Elements")
pairwise.t.test(
x = tssPrimateData$PhyloP,
g = tssPrimateData$Filename,
p.adjust.method = "bonferroni"
)
otherRegMammalData <- subset(collapsedData, PhyloP_Type == "Mammal Conservation" & State == "Other Regulatory Elements")
pairwise.t.test(
x = otherRegMammalData$PhyloP,
g = otherRegMammalData$Filename,
p.adjust.method = "bonferroni"
)
otherRegPrimateData <- subset(collapsedData, PhyloP_Type == "Primate Conservation" & State == "Other Regulatory Elements")
pairwise.t.test(
x = otherRegPrimateData$PhyloP,
g = otherRegPrimateData$Filename,
p.adjust.method = "bonferroni"
)
