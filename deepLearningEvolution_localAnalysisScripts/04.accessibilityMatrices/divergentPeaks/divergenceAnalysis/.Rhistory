mutationCountData <- read.csv("mutationCountSummaries/upInHominins/H1_hESC_1.upInHominins_summary.txt", header=TRUE, sep="\t")
head(mutationCountData)
allData <- read.csv("../upInHominins/H1_hESC_1.upInHominins.bed", header=FALSE, sep="\t")
head(allData)
colnames(allData) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLog10pAdj")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
head(allData)
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
ggplot(mergedData, aes(x=mutation_count, y=log2Fc)) +
geom_point(alpha=0.6) +
labs(title="Mutation Count vs. Log2 Fold Change",
x="Mutation Count",
y="Log2 Fold Change") +
theme_classic()
library(ggpubr)
ggplot(mergedData, aes(x=mutation_count, y=log2Fc)) +
geom_point(alpha=0.6) +
labs(title="Mutation Count vs. Log2 Fold Change",
x="Mutation Count",
y="Log2 Fold Change") +
theme_classic()
head(mergedData)
mergedData$divergence <- mergedData$mutation_count / mergedData$length
mergedData$length <- mergedData$end - mergedData$start
head(mergedData)
mergedData$divergence <- mergedData$mutation_count / mergedData$length
ggscatter(mergedData, "divergence", "log2Fc")
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
ggscatter(mergedData, "divergence", "log2Fc")
library(ggpubr)
mutationCountData <- read.csv("mutationCountSummaries/upInHominins/H1_hESC_1.upInHominins_summary.txt", header=TRUE, sep="\t")
allData <- read.csv("../upInHominins/H1_hESC_1.upInHominins.bed", header=FALSE, sep="\t")
colnames(allData) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLog10pAdj")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedUpInHomininData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedUpInHomininData$mutation_count[is.na(mergedUpInHomininData$mutation_count)] <- 0
mergedUpInHomininData$length <- mergedUpInHomininData$end - mergedUpInHomininData$start
mergedUpInHomininData$divergence <- mergedUpInHomininData$mutation_count / mergedUpInHomininData$length * 100 # mutations per 100 bases
ggscatter(mergedUpInHomininData, "divergence", "log2Fc")
processAndMergeData <- function(mutationCountFile, allRegionsFile) {
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
colnames(allData) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLog10pAdj")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
mergedData$length <- mergedData$end - mergedData$start
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
return(mergedData)
}
upInHomininData <- processAndMergeData("mutationCountSummaries/upInHominins/H1_hESC_1.upInHominins_summary.txt", "../upInHominins/H1_hESC_1.upInHominins.bed")
upInHomininData
ggscatter(upInHomininData, "divergence", "log2Fc")
upInGreatApeData <- processAndMergeData("mutationCountSummaries/upInGreatApes/H1_hESC_1.upInGreatApes_summary.txt", "../upInGreatApes/H1_hESC_1.upInGreatApes.bed")
ggscatter(upInGreatApeData, "divergence", "log2Fc")
upInHomininData <- processAndMergeData("mutationCountSummaries/upInHominins/H1_hESC_1.upInHominins_summary.txt", "../upInHominins/H1_hESC_1.upInHominins.bed")
upInGreatApeData <- processAndMergeData("mutationCountSummaries/upInGreatApes/H1_hESC_1.upInGreatApes_summary.txt", "../upInGreatApes/H1_hESC_1.upInGreatApes.bed")
noChangeData <- processAndMergeData("mutationCountSummaries/noChangeHomininGreatApe/H1_hESC_1.noChangeHomininGreatApe_summary.txt", "../noChangeHomininGreatApe/H1_hESC_1.noChangeHomininGreatApe.bed")
ggscatter(noChangeData, "divergence", "log2Fc")
processAndMergeData <- function(mutationCountFile, allRegionsFile, condition) {
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
colnames(allData) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLog10pAdj")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
mergedData$length <- mergedData$end - mergedData$start
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
mergedData$condition <- condition
return(mergedData)
}
upInHomininData <- processAndMergeData("mutationCountSummaries/upInHominins/H1_hESC_1.upInHominins_summary.txt", "../upInHominins/H1_hESC_1.upInHominins.bed", "upInHominins")
upInGreatApeData <- processAndMergeData("mutationCountSummaries/upInGreatApes/H1_hESC_1.upInGreatApes_summary.txt", "../upInGreatApes/H1_hESC_1.upInGreatApes.bed", "upinGreatApes")
noChangeData <- processAndMergeData("mutationCountSummaries/noChangeHomininGreatApe/H1_hESC_1.noChangeHomininGreatApe_summary.txt", "../noChangeHomininGreatApe/H1_hESC_1.noChangeHomininGreatApe.bed", "noChangeHomininGreatApe")
mergedData <- rbind(upInHomininData, upInGreatApeData, noChangeData)
ggscatter(mergedData, "divergence", "log2Fc", color=condition)
ggscatter(mergedData, "divergence", "log2Fc", color="condition")
ggboxplot(mergedData, "condition", "divergence")
ggboxplot(mergedData, "condition", "divergence", add="jitter")
ggboxplot(mergedData, "condition", "divergence", add="jitter")+theme(outlier.shape="none")
ggboxplot(mergedData, "condition", "divergence")+theme(outlier.shape="none")
ggplot(mergedData, aes(x="condition", y="divergence"))+geom_boxplot(outlier.shape = NA)
ggplot(mergedData, aes(x=condition, y=divergence))+geom_boxplot(outlier.shape = NA)
ggplot(mergedData, aes(x=condition, y=divergence))+geom_boxplot(outlier.shape = NA)+ylim(0,4)
ggplot(mergedData, aes(x=condition, y=divergence))+geom_boxplot(outlier.shape = NA)+ylim(0,4)+geom_jitter()
ggplot(mergedData, aes(x=condition, y=divergence))+geom_violin(outlier.shape = NA)+ylim(0,4)
ggplot(mergedData, aes(x=condition, y=divergence))+geom_boxplot(outlier.shape = NA)+ylim(0,4)+geom_jitter()
ggboxplot(mergedData, "condition", "divergence")+ylim(0,4)
ggboxplot(mergedData, "condition", "divergence", add="jitter")+ylim(0,4)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
ggscatter(mergedData, "divergence", "log2Fc", color="condition")
ggscatter(mergedData, "divergence", "log2Fc", color="condition", size=0.5)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
ggboxplot(mergedData, "condition", "mutation_count", add="jitter", alpha=0.3, fill="condition", color="condition")
ggboxplot(mergedData, "condition", "length", add="jitter", alpha=0.3, fill="condition", color="condition")
ggboxplot(mergedData, "condition", "mutation_count", add="jitter", alpha=0.3, fill="condition", color="condition")
ggscatter(mergedData, "mutation_count", "log2Fc", color="condition", size=0.5)
ininGreatApe")
), method="t.test", label="p.signif") +
t.test(mutation_count ~ Condition, data = mergedData %>% filter(Condition %in% c("upInHominins", "upInGreatApes")))
t.test(mutation_count ~ condition, data = mergedData %>% filter(Condition %in% c("upInHominins", "upInGreatApes")))
t.test(mutation_count ~ condition, data = mergedData %>% filter(condition %in% c("upInHominins", "upInGreatApes")))
head(mergedData)
t.test(mutation_count ~ condition, subset(mergedData, condition %in% c("upInHominins", "upInGreatApes")))
subset(mergedData, condition %in% c("upInHominins", "upInGreatApes")
)
ggscatter(mergedData, "mutation_count", "length")
ggscatter(mergedData, "length", "mutation_count")
ggboxplot(mergedData, "condition", "mutation_count")
ggboxplot(mergedData, "condition", "mutation_count")+ylim(0,20)
head(mergedData)
sort(mergedData$length)
mergedData_sorted <- mergedData %>% arrange(desc(length))
library(tidyr)
mergedData_sorted <- mergedData %>% arrange(desc(length))
library(dplyr)
mergedData_sorted <- mergedData %>% arrange(desc(length))
head(mergedData_sorted)
ggscatter(mergedData, "log2Fc", "divergence", color="condition")
ggscatter(mergedData, "log2Fc", "divergence", color="condition", size=0.5)
library(ggpubr)
processAndMergeData <- function(mutationCountFile, allRegionsFile, condition) {
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
colnames(allData) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLog10pAdj")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
mergedData$length <- mergedData$end - mergedData$start
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
mergedData$condition <- condition
return(mergedData)
}
data <- read.csv("mutationCountsSummary/upInHominins.merged.Summary.txt", header=TRUE, sep="\t")
head(data)
upInHomininData <- processAndMergeData("mutationCountSummaries/upInHominins.merged.Summary.txt", "../upInHominins.merged.bed", "upInHominins")
upInHomininData <- processAndMergeData("mutationCountsSummary/upInHominins.merged.Summary.txt", "../upInHominins.merged.bed", "upInHominins")
head(upInHomininData)
upInGreatApesData <- processAndMergeData("mutationCountsSummary/upInGreatApes.merged.Summary.txt", "../upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processAndMergeData("mutationCountsSummary/noChangeHomininGreatApe.merged.Summary.txt", "../noChange.merged.bed", "noChange")
mergedData <- rbind(upInHomininData, upInGreatApeData, noChangeData)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
mergedData <- rbind(upInHomininData, upInGreatApesData, noChangeData)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
noChangeSizeMatchedData <- processAndMergeData("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", "../noChange.subsampled.merged.bed", "noChangeSizeMatched")
noChangeSizeMatchedData <- processAndMergeData("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", "../noChange.subsampled.merged.bed", "noChangeSizeMatched")
mutationCountData <- read.csv("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", header=TRUE, sep="\t")
head(mutationCountData)
allRegionsFile <- "../noChange.subsampled.merged.bed"
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
colnames(allData) <- c("chr", "start", "end", "log2Fc", "score", "strand", "minusLog10pAdj")
allData <- select(allData, c("V1", "V2", "V3"))
library(dplyr)
allData <- select(allData, c("V1", "V2", "V3"))
head(allData)
colnames(allData) <- c("chr", "start", "end")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
upInHomininData <- processAndMergeData("mutationCountsSummary/upInHominins.merged.Summary.txt", "../upInHominins.merged.bed", "upInHominins")
upInGreatApesData <- processAndMergeData("mutationCountsSummary/upInGreatApes.merged.Summary.txt", "../upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processAndMergeData("mutationCountsSummary/noChangeHomininGreatApe.merged.Summary.txt", "../noChange.merged.bed", "noChange")
noChangeSizeMatchedData <- processAndMergeData("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", "../noChange.subsampled.merged.bed", "noChangeSizeMatched")
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
mutationCountFile <- "mutationCountsSummary/noChange.subsampled.merged.Summary.txt"
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
allData <- select(allData, c("V1", "V2", "V3"))
colnames(allData) <- c("chr", "start", "end")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
mergedData$length <- mergedData$end - mergedData$start
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
mergedData$condition <- condition
heaD(mergedData)
head(mergedData)
processAndMergeData <- function(mutationCountFile, allRegionsFile, condition) {
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
allData <- select(allData, c("V1", "V2", "V3"))
colnames(allData) <- c("chr", "start", "end")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
mergedData$length <- mergedData$end - mergedData$start
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
mergedData$condition <- condition
return(mergedData)
}
noChangeSizeMatchedData <- processAndMergeData("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", "../noChange.subsampled.merged.bed", "noChangeSizeMatched")
upInHomininData <- processAndMergeData("mutationCountsSummary/upInHominins.merged.Summary.txt", "../upInHominins.merged.bed", "upInHominins")
upInGreatApesData <- processAndMergeData("mutationCountsSummary/upInGreatApes.merged.Summary.txt", "../upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processAndMergeData("mutationCountsSummary/noChangeHomininGreatApe.merged.Summary.txt", "../noChange.merged.bed", "noChange")
noChangeSizeMatchedData <- processAndMergeData("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", "../noChange.subsampled.merged.bed", "noChangeSizeMatched")
mergedData <- rbind(upInHomininData, upInGreatApesData, noChangeData)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
mergedData <- rbind(upInHomininData, upInGreatApesData, noChangeData, noChangeSizeMatchedData)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
head(mergedData)
ggplot(mergedData, "condition", "mutation_count", add="jitter", alpha=0.3, fill="condition", color="condition")
ggboxplot(mergedData, "condition", "mutation_count", add="jitter", alpha=0.3, fill="condition", color="condition")
ggplot(mergedData, aes(x=condition, y=mutation_count))+geom_boxplot(outlier.shape = NA)+geom_jitter()
ggplot(mergedData, aes(x=condition, y=mutation_count))+geom_boxplot(outlier.shape = NA)
ggplot(mergedData, aes(x=condition, y=mutation_count))+geom_boxplot(outlier.shape = NA)+ylim(0, 20)
gghistogram(mergedData, "'mutation_count", y="density", facet.by="condition")
gghistogram(mergedData, "mutation_count", y="density", facet.by="condition")
gghistogram(mergedData, "mutation_count", y="density", facet.by="condition")+xlim(0, 25)
gghistogram(mergedData, "mutation_count", y="density", facet.by="condition", bins=25)+xlim(0, 25)
gghistogram(mergedData, "mutation_count", facet.by="condition", bins=25)+xlim(0, 25)
gghistogram(mergedData, "mutation_count", facet.by="condition", bins=25)+xlim(0, 25)
gghistogram(mergedData, "mutation_count", y="density", facet.by="condition", bins=25)+xlim(0, 25)
gghistogram(mergedData, "divergence", y="density" , facet.by="condition", bins=25)+xlim(0,25)
gghistogram(mergedData, "divergence", y="density" , facet.by="condition", bins=25)+xlim(0,10)
gghistogram(mergedData, "divergence", y="density" , facet.by="condition", bins=25)+xlim(0,5)
library(ggridges)
ggplot(mergedData, aes(x=divergence, y=condition, fill=condition))+geom_density_ridges(aes(alpha=0.2))
ggplot(mergedData, aes(x=divergence, y=condition, fill=condition))+geom_density_ridges(aes(alpha=0.2))+xlim(0, 5)
ggplot(mergedData, aes(x=divergence, y=condition, fill=condition))+geom_density_ridges(aes(alpha=0.2))+xlim(0, 3)
ggplot(mergedData, aes(x=divergence, y=condition, fill=condition))+geom_density_ridges(aes(alpha=0.2))+xlim(0, 3)+theme_classic() + geom_vline(xintercept=1, linetype="dashed")
library(ggpubr)
library(ggridges)
library(dplyr)
processAndMergeData <- function(mutationCountFile, allRegionsFile, condition) {
mutationCountData <- read.csv(mutationCountFile, header=TRUE, sep="\t")
allData <- read.csv(allRegionsFile, header=FALSE, sep="\t")
allData <- select(allData, c("V1", "V2", "V3"))
colnames(allData) <- c("chr", "start", "end")
allData$name <- paste(allData$chr, allData$start, allData$end, sep=".")
mergedData <- merge(allData, mutationCountData[, c("name", "mutation_count")], by="name", all.x=TRUE)
mergedData$mutation_count[is.na(mergedData$mutation_count)] <- 0
mergedData$length <- mergedData$end - mergedData$start
mergedData$divergence <- mergedData$mutation_count / mergedData$length * 100 # mutations per 100 bases
mergedData$condition <- condition
return(mergedData)
}
upInHomininData <- processAndMergeData("mutationCountsSummary/upInHominins.merged.Summary.txt", "../upInHominins.merged.bed", "upInHominins")
upInGreatApesData <- processAndMergeData("mutationCountsSummary/upInGreatApes.merged.Summary.txt", "../upInGreatApes.merged.bed", "upInGreatApes")
noChangeData <- processAndMergeData("mutationCountsSummary/noChangeHomininGreatApe.merged.Summary.txt", "../noChange.merged.bed", "noChange")
noChangeSizeMatchedData <- processAndMergeData("mutationCountsSummary/noChange.subsampled.merged.Summary.txt", "../noChange.subsampled.merged.bed", "noChangeSizeMatched")
mergedData <- rbind(upInHomininData, upInGreatApesData, noChangeData, noChangeSizeMatchedData)
ggboxplot(mergedData, "condition", "divergence", add="jitter", alpha=0.3, fill="condition", color="condition")+ylim(0,4)
ggplot(mergedData, aes(x=condition, y=mutation_count))+geom_boxplot(outlier.shape = NA)+ylim(0, 20)
gghistogram(mergedData, "mutation_count", y="density", facet.by="condition", bins=25)+xlim(0, 25)
gghistogram(mergedData, "divergence", y="density" , facet.by="condition", bins=25)+xlim(0,5)
ggplot(mergedData, aes(x=divergence, y=condition, fill=condition))+geom_density_ridges(aes(alpha=0.2))+xlim(0, 3)+theme_classic() + geom_vline(xintercept=1, linetype="dashed")
ggplot(mergedData, aes(x=divergence, color=condition)) +
stat_ecdf(geom="step") +
labs(x="Divergence", y="Cumulative Probability") +
theme_classic()
ggplot(mergedData, aes(x=divergence, color=condition)) +
stat_ecdf(geom="step") +
labs(x="Divergence", y="Cumulative Probability") +
theme_classic() + xlim(0, 5)
ggplot(mergedData, aes(x=divergence, color=condition)) +
stat_ecdf(geom="step") +
labs(x="Divergence", y="Cumulative Probability") +
theme_classic() + xlim(0, 4)
unique(mergedData$condition)
mergedData$condition <- factor(mergedData$condition, levels = c("upInHominins", "upInGreatApes", "noChange", "noChangeSizeMatched"))
custom_colors <- c("upInHominins" = "#E96D4E",
"upInGreatApes" = "#254857",
"noChange" = "#6D6E71",
"noChangeSizeMatched" = "#000000")
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic()
ggplot(mergedData, aes(x = divergence, color = condition, size=1)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic()
ggplot(mergedData, aes(x = divergence, color = condition, linewidth=3)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic()
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic()
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3)
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Divergence Rates")
genomeWideAverageDivergence <- 100 * (18661171 / 3088269832) # number of mutations in human/HCA vcf file divided by total length of hg38, scaled per 100 base pairs
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Divergence Rates") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Functionally Divergent Elements have Greater Sequence Divergence") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
ggplot(mergedData, aes(x = divergence, color = condition, size=0.5)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
ggplot(mergedData, aes(x = divergence, color = condition, size=0.1)) +
stat_ecdf(geom = "step") +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step", size=1.2) +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step", size=2) +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
pdf("divergenceAnalysis.pdf", height=3, width=3)
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step", size=2) +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
dev.off()
pairwise.t.test(mergedData$divergence, mergedData$condition, p.adjust.method = "Bonferroni")
pairwise.t.test(mergedData$divergence, mergedData$condition, p.adjust.method = "bonferroni")
pdf("divergenceAnalysis.pdf", height=3, width=3)
ggplot(mergedData, aes(x = divergence, color = condition)) +
stat_ecdf(geom = "step", size=1) +
scale_color_manual(values = custom_colors) +
labs(x = "Divergence", y = "Cumulative Probability", color = "Condition") +
theme_classic() + xlim(0, 3) + theme(legend.position="none") +
labs(x="Mutations Per 100 Base Pairs", title="Greater Sequence Divergence in Functionally Divergent Elements") + geom_vline(xintercept=genomeWideAverageDivergence, linetype="dashed")
dev.off()
